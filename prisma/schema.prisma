generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  name  String?
  username  String?
  bio String?
  email String  @unique
  emailVerified DateTime?
  avatar  String?
  coverImage  String?
  hashedPassword  String?
  hasNotification Boolean?
  followingIds  String[]  @db.ObjectId

  posts Post[]
  comments  Comment[]
  accounts  Account[]
  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  content String
  likedIds String[] @db.ObjectId

  comments  Comment[]

  creatorId String  @db.ObjectId
  creator User  @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  content String
  likedIds String[] @db.ObjectId

  userId String  @db.ObjectId
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String  @db.ObjectId
  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notification {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  content String

  userId String  @db.ObjectId
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  type  String
  provider  String
  providerAccountId String
  access_token  String? @db.String
  refresh_token String? @db.String
  expires_at  Int?
  token_type  String?
  scope String?
  id_token  String? @db.String
  session_state String?

  userId String  @db.ObjectId
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id  String  @id @default(auto())  @map("_id") @db.ObjectId
  identifier  String
  token String
  expires DateTime

  @@unique([identifier, token])
}
